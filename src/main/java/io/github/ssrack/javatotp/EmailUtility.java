package io.github.ssrack.javatotp;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;

import javax.mail.*;
import javax.mail.internet.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

import static com.google.zxing.client.j2se.MatrixToImageWriter.writeToStream;
import static javax.mail.Session.getDefaultInstance;
import static javax.mail.Transport.send;

/**
 * This class contains the utility methods {@link #sendBarCodeToEmail(EmailProperties, String)} which sends email to the end use with the QRCode attached
 * and {@link #generateQRCode(String, String, int, int)} which generates the QRCode
 *
 * @author saiteja77
 * @since 0.0.1.Release
 */
public class EmailUtility {

    /**
     * This method sends an email to the end user with the QRCode attached and giving the instructions how to use it to setup the MFA
     * and then deletes the QRCode which is in the given file path
     *
     * @param properties The {@link io.github.ssrack.javatotp.EmailProperties} used to send email to the end user
     * @param filePath The file path of the location of the QRCode
     * @throws MessagingException Thrown if any {@link EmailProperties} have invalid values
     * @throws IOException Thrown if an invalid filePath is given or the filePath is inaccessible to the application
     */
    public static void sendBarCodeToEmail(EmailProperties properties, String filePath) throws MessagingException, IOException {

        Properties props = new Properties();

        props.put("mail.smtp.auth", properties.isAuth());
        props.put("mail.smtp.starttls.enable", properties.getEnableTLS());
        props.put("mail.smtp.host", properties.getHostName());
        props.put("mail.smtp.port", properties.getPort());

        Session emailSession;
        /**
         * If the consumer wants the email session to be authenticated,
         * then the session will be authenticated with the given sender's email address and password
         */
        if (properties.isAuth()) {
            emailSession = Session.getInstance(props, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(
                            properties.getSender(), properties.getPassword());
                }
            });
        }
        /**
         * If the consumer doesn't want the email session to be authenticated,
         * then a default instance of the email session will be opened
         */
        else emailSession = getDefaultInstance(props);

        MimeMessage message = new MimeMessage(emailSession);
        message.setFrom(new InternetAddress(properties.getSender()));
        message.addRecipient(Message.RecipientType.TO, new InternetAddress(properties.getRecipient()));
        message.setSubject("QR Code to setup MFA");

        MimeBodyPart mimeBodyPart = new MimeBodyPart();
        mimeBodyPart.setContent("Attached is the QR Code you've requested. Scan it in one the authenticator apps which you can find on PlayStore in Android or AppStore in IOS devices.", "text/html");

        MimeBodyPart attachmentBodyPart = new MimeBodyPart();
        File qrCode = new File(filePath);
        attachmentBodyPart.attachFile(qrCode);

        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(mimeBodyPart);
        multipart.addBodyPart(attachmentBodyPart);

        message.setContent(multipart);
        send(message);

        qrCode.deleteOnExit();
    }

    /**
     * Generates a QRCode which shall be used by the method {@link #sendBarCodeToEmail(EmailProperties, String)}
     *
     * @param barcodeURL Barcode data generated by the method {@link io.github.ssrack.javatotp.TOTPUtility#getGoogleAuthenticatorBarCodeURL(String, String)}
     * @param filePath Location where you want to save the QRCode image
     * @param width Width of the generated QRCode
     * @param height Height of the generated QRCode
     * @throws WriterException Thrown if there is any error while generating the QRCode
     * @throws IOException Thrown if an invalid filePath is given or the filePath is inaccessible to the application
     */
    public static void generateQRCode(String barcodeURL, String filePath, int width, int height) throws WriterException, IOException {
        BitMatrix matrix = new MultiFormatWriter().encode(barcodeURL, BarcodeFormat.QR_CODE, width, height);
        try(FileOutputStream out = new FileOutputStream(filePath)) {
            writeToStream(matrix, "png", out);
        }
    }
}
